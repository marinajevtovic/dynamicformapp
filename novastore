import {fromJS,Map, updateIn, List} from 'immutable'

const ADD_FORM='ADD_FORM'
const REMOVE_FORM='REMOVE_FORM'
const ADD_FIELD_GROUP='ADD_FIELD_GROUP'
const REMOVE_FIELD_GROUP='REMOVE_FIELD_GROUP'
const ADD_FIELD='ADD_FIELD'
const REMOVE_FIELD='REMOVE_FIELD'
function nextID(obj){
    console.log(obj.size)
   // const a=(obj.size ? Math.max(...obj.map((obj)=>{return obj.get('id')})):0)+1;
    //console.log(a,"AAAAAAAAAAAAAAA")
    return(obj.size ? Math.max(...obj.map((obj)=>{return obj.get('id')})):0)+1
}
const initialState=fromJS({
   
    forms:[{
        id:1,
        name:'Form Example',
        fieldgroup:[{
            id:1,
            name:'Field Group Example ',
            fields:[{
                typeF:'input',
                description:'Enter your name',
                placeholder:'First name'
            },{
                typeF:'input',
                description:'Enter your surname',
                placeholder:'Last name'
            },{
                typeF:'checkbox',
                description:'Finished your task?',
                placeholder:'Finished'
            }]
            }
            ]
       
        
            
        
    },
       
        
            
        
    ]
    
    
   
});
export const actions={
addForm(){
    return{
    type:ADD_FORM,
    
}
},
removeForm(index){
    return{
        type:REMOVE_FORM,
        index
    }
},
addFieldGroup(forms,index){
    return{
        type: ADD_FIELD_GROUP,
        
        forms:forms,
        index:index,
        //fieldgroup:forms[index].fieldgroup
        

    }

},
removeFieldGroup(index,id){
    return{
        type: REMOVE_FIELD_GROUP,
        index,
        id 
    }
},
addField(formIndex,fieldgroupIndex,typeF,description,placeholder){
    return{
        type:ADD_FIELD,
        formIndex:formIndex,
        fieldgroupIndex:fieldgroupIndex,
        typeF:typeF,
        description:description,
        placeholder:placeholder
    }
},
removeField(formIndex,fieldGroupIndex,fieldIndex){
    return{
        type:REMOVE_FIELD,
        formIndex,
        fieldGroupIndex,
        fieldIndex
    }
}


}
export function reducer(state=initialState,action){
    switch(action.type){
        case ADD_FORM:{
            

//let im_state=fromJS(state);
const newID=nextID(state.get('forms'));
console.log(state.get('forms'))
return state.updateIn(['forms'],list=>list.push(Map({
    id:newID,
    name:'Form '+newID,
    fieldgroup:List([])
})))
        }
        case REMOVE_FORM:{
            //let im_state=fromJS(state);
            
            return state.updateIn(['forms'],
            list=> list.filter((_,i)=>i!==action.index))

        }
        case ADD_FIELD_GROUP:{
            const index=action.index;
            //let im_state=fromJS(state);
            let next_id=nextID(action.forms.getIn([index,'fieldgroup']));
            let id=action.forms.getIn([index,"id"]);
            console.log(id,"ALOOOOOOOOOOOOOO")
            
           return state.updateIn(['forms',index,'fieldgroup'],
           
         list=>list.push(Map({
             id:next_id,
             name:'Field Group '+next_id,
             fields:List([])
         }
            )))

           
      


        
    }
    case REMOVE_FIELD_GROUP:{
               const id=action.id;
               const index=action.index;
               let im_state=fromJS(state);
               return im_state.updateIn(['forms',id,'fieldgroup'],
               list=> list.filter((_,i)=>i!==index))
    }
     case ADD_FIELD:{
        const fieldgroupIndex=action.fieldgroupIndex;
        let im_state=fromJS(state);
        console.log("ADD FIELD ACTION", {im_state});
         const formIndex=action.formIndex
         return im_state.updateIn(['forms',formIndex,'fieldgroup',fieldgroupIndex,'fields'],
         list=>list.push(Map({
                      typeF:action.typeF,
                     description:action.description,
                     placeholder:action.placeholder
                   
                    
        }))
        )
    }
    case REMOVE_FIELD:{
        const formIndex=action.formIndex;
        const fieldGroupIndex=action.fieldGroupIndex;
        const fieldIndex=action.fieldIndex;
        let im_state=fromJS(state);
        return im_state.updateIn(['forms',formIndex,'fieldgroup',fieldGroupIndex,'fields'],
        list=>list.filter((_,i)=>i!==fieldIndex)
        )
    }


            
            
        
        default: return state

    }


    
}
